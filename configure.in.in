dnl vi:set et ai sw=2 sts=2 ts=2: */
dnl 
dnl Copyright (c) 2007-2010 Jannis Pohlmann <jannis@xfce.org>
dnl 
dnl This library is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU Library General Public
dnl License as published by the Free Software Foundation; either
dnl version 2 of the License, or (at your option) any later version.
dnl 
dnl This library is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
dnl GNU Library General Public License for more details.
dnl 
dnl You should have received a copy of the GNU Library General 
dnl Public License along with this library; if not, write to the 
dnl Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
dnl Boston, MA 02110-1301, USA.

dnl ***************************
dnl *** Version information ***
dnl ***************************
m4_define([garcon_verinfo], [0:0:0])
m4_define([garcon_version_api_major], [1])
m4_define([garcon_version_major], [0])
m4_define([garcon_version_minor], [1])
m4_define([garcon_version_micro], [3])
m4_define([garcon_version_build], [@REVISION@])
m4_define([garcon_version_tag], [])
m4_define([garcon_version], [garcon_version_major().garcon_version_minor().garcon_version_micro()ifelse(garcon_version_tag(), [git], [garcon_version_tag()-garcon_version_build()], [garcon_version_tag()])])

dnl ********************************************
dnl *** Full debug support for SVN snapshots ***
dnl ********************************************
m4_define([garcon_debug_default], [ifelse(garcon_version_tag(), [git], [full], [minimum])])

dnl ***************************
dnl *** Initialize autoconf ***
dnl ***************************
AC_COPYRIGHT([Copyright (c) 2007-2010 Jannis Pohlmann <jannis@xfce.org>])
AC_INIT([garcon], [garcon_version], [http://bugzilla.xfce.org/])
AC_PREREQ([2.50])
AC_REVISION([@REVISION@])
AC_CANONICAL_TARGET()

dnl ***************************
dnl *** Initialize automake ***
dnl ***************************
AM_INIT_AUTOMAKE([AC_PACKAGE_TARNAME()], [AC_PACKAGE_VERSION()])
AM_CONFIG_HEADER([config.h])
AM_MAINTAINER_MODE()
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

dnl **************************
dnl *** Libtool versioning ***
dnl **************************
GARCON_VERINFO=garcon_verinfo()
AC_SUBST([GARCON_VERINFO])

dnl ****************************
dnl *** Subst garcon version ***
dnl ****************************
GARCON_VERSION_MAJOR=garcon_version_major()
GARCON_VERSION_MINOR=garcon_version_minor()
GARCON_VERSION_MICRO=garcon_version_micro()
GARCON_VERSION_API_MAJOR=garcon_version_api_major()
GARCON_VERSION_API=$GARCON_VERSION_API_MAJOR
AC_SUBST([GARCON_VERSION_MAJOR])
AC_SUBST([GARCON_VERSION_MINOR])
AC_SUBST([GARCON_VERSION_MICRO])
AC_SUBST([GARCON_VERSION_API_MAJOR])
AC_SUBST([GARCON_VERSION_API])

dnl *******************************
dnl *** Check for UNIX variants ***
dnl *******************************
AC_AIX()
AC_ISC_POSIX()
AC_MINIX()

dnl ********************************
dnl *** Check for basic programs ***
dnl ********************************
AM_PROG_AS()
AC_PROG_CC()
AC_PROG_INSTALL()
AC_PROG_INTLTOOL([0.31], [no-xml])
AC_PROG_LIBTOOL()
AM_PROG_CC_C_O()

dnl ***************************************
dnl *** Check for standard header files ***
dnl ***************************************
AC_HEADER_STDC()
AC_CHECK_HEADERS([fcntl.h errno.h sys/mman.h sys/stat.h sys/wait.h memory.h \
                  stdlib.h stdio.h string.h sys/types.h sys/time.h unistd.h \
                  time.h stdarg.h sys/types.h sys/uio.h sched.h ctype.h])

dnl ************************************
dnl *** Check for standard functions ***
dnl ************************************
AC_FUNC_MMAP()
dnl AC_CHECK_FUNCS([])

dnl ******************************
dnl *** Check for i18n support ***
dnl ******************************
XDT_I18N([@LINGUAS@])

dnl ***********************************
dnl *** Check for required packages ***
dnl ***********************************
XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [2.14.0])
XDT_CHECK_PACKAGE([GIO], [gio-2.0], [2.14.0])
XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [2.14.0])

dnl *************************
dnl *** Check for gtk-doc ***
dnl *************************
GTK_DOC_CHECK([1.0])

dnl ***********************************
dnl *** Check for debugging support ***
dnl ***********************************
AC_ARG_ENABLE([debug],
AC_HELP_STRING([--enable-debug=@<:@no/minimum/yes@:>@], [Turn on debugging @<:@default=garcon_debug_default@:>@]),
  [], [enable_debug=garcon_debug_default])
AC_MSG_CHECKING([whether to enable debugging support])
if test x"$enable_debug" = x"yes" -o x"$enable_debug" = x"full"; then
  dnl Print the result
  AC_MSG_RESULT([$enable_debug])

  dnl Make sure we detect possible errors (if supported)
  save_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS -Wall -Werror"
  AC_MSG_CHECKING([whether $CC accepts -Wall -Werror])
  AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
    AC_MSG_RESULT([yes])
  ], [
    CFLAGS="$save_CFLAGS"
    AC_MSG_RESULT([no])
  ])

  dnl Paranoia for --enable-debug=full
  if test x"$enable_debug" = x"full"; then
    dnl Enable extensive debugging
    CFLAGS="$CFLAGS -DG_ENABLE_DEBUG"

    dnl Use -O0 -g3 if the compiler supports it
    save_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS -O0 -g3"
    AC_MSG_CHECKING([whether $CC accepts -O0 -g3])
    AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
      AC_MSG_RESULT([yes])
    ], [
      CFLAGS="$save_CFLAGS"
      AC_MSG_RESULT([no])
    ])
  fi
else
  dnl Print the result
  AC_MSG_RESULT([$enable_debug])

  dnl Disable debugging (release build)
  CFLAGS="$CFLAGS -DNDEBUG"

  dnl Disable object cast checks
  CFLAGS="$CFLAGS -DG_DISABLE_CAST_CHECKS"

  dnl Disable all checks for --enable-debug=no
  if test x"$enable_debug" = x"no"; then
    CFLAGS="$CFLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
  fi
fi

dnl **************************************
dnl *** Check for linker optimizations ***
dnl **************************************
AC_MSG_CHECKING([whether $LD accepts --as-needed])
case `$LD --as-needed -v 2>&1 </dev/null` in
*GNU* | *'with BFD'*)
  LDFLAGS="$LDFLAGS -Wl,--as-needed"
  AC_MSG_RESULT([yes])
  ;;
*)
  AC_MSG_RESULT([no])
  ;;
esac
AC_MSG_CHECKING([whether $LD accepts -O1])
case `$LD -O1 -v 2>&1 </dev/null` in
*GNU* | *'with BFD'*)
  LDFLAGS="$LDFLAGS -Wl,-O1"
  AC_MSG_RESULT([yes])
  ;;
*)
  AC_MSG_RESULT([no])
  ;;
esac

AC_OUTPUT([
Makefile
data/Makefile
data/xfce/Makefile
docs/Makefile
docs/reference/Makefile
docs/reference/version.xml
garcon/Makefile
garcon/garcon-1.pc
garcon/garcon-config.h
po/Makefile.in
tests/Makefile
])

dnl ***************************
dnl *** Print configuration ***
dnl ***************************
echo
echo "Build Configuration:"
echo
echo "* Debug Support:  $enable_debug"
echo
